'------------------------------------------------------------------------------
' <auto-generated>
'     此代码由工具生成。
'     运行时版本:4.0.30319.18408
'
'     对此文件的更改可能会导致不正确的行为，并且如果
'     重新生成代码，这些更改将会丢失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'此源代码是由 Microsoft.VSDesigner 4.0.30319.18408 版自动生成。
'
Namespace net.npsyzx.www
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="TokenServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class TokenService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private TokenGetCredenceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TokenInsertOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TokenGetUserNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClearTokenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Web.My.MySettings.Default.Web_net_npsyzx_www_TokenService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event TokenGetCredenceCompleted As TokenGetCredenceCompletedEventHandler
        
        '''<remarks/>
        Public Event TokenInsertCompleted As TokenInsertCompletedEventHandler
        
        '''<remarks/>
        Public Event TokenGetUserNameCompleted As TokenGetUserNameCompletedEventHandler
        
        '''<remarks/>
        Public Event ClearTokenCompleted As ClearTokenCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TokenGetCredence", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TokenGetCredence(ByVal tokenValue As String) As Object
            Dim results() As Object = Me.Invoke("TokenGetCredence", New Object() {tokenValue})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TokenGetCredenceAsync(ByVal tokenValue As String)
            Me.TokenGetCredenceAsync(tokenValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TokenGetCredenceAsync(ByVal tokenValue As String, ByVal userState As Object)
            If (Me.TokenGetCredenceOperationCompleted Is Nothing) Then
                Me.TokenGetCredenceOperationCompleted = AddressOf Me.OnTokenGetCredenceOperationCompleted
            End If
            Me.InvokeAsync("TokenGetCredence", New Object() {tokenValue}, Me.TokenGetCredenceOperationCompleted, userState)
        End Sub
        
        Private Sub OnTokenGetCredenceOperationCompleted(ByVal arg As Object)
            If (Not (Me.TokenGetCredenceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TokenGetCredenceCompleted(Me, New TokenGetCredenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TokenInsert", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TokenInsert(ByVal username As String) As Object
            Dim results() As Object = Me.Invoke("TokenInsert", New Object() {username})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TokenInsertAsync(ByVal username As String)
            Me.TokenInsertAsync(username, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TokenInsertAsync(ByVal username As String, ByVal userState As Object)
            If (Me.TokenInsertOperationCompleted Is Nothing) Then
                Me.TokenInsertOperationCompleted = AddressOf Me.OnTokenInsertOperationCompleted
            End If
            Me.InvokeAsync("TokenInsert", New Object() {username}, Me.TokenInsertOperationCompleted, userState)
        End Sub
        
        Private Sub OnTokenInsertOperationCompleted(ByVal arg As Object)
            If (Not (Me.TokenInsertCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TokenInsertCompleted(Me, New TokenInsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TokenGetUserName", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TokenGetUserName(ByVal tokenValue As String) As Object
            Dim results() As Object = Me.Invoke("TokenGetUserName", New Object() {tokenValue})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TokenGetUserNameAsync(ByVal tokenValue As String)
            Me.TokenGetUserNameAsync(tokenValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TokenGetUserNameAsync(ByVal tokenValue As String, ByVal userState As Object)
            If (Me.TokenGetUserNameOperationCompleted Is Nothing) Then
                Me.TokenGetUserNameOperationCompleted = AddressOf Me.OnTokenGetUserNameOperationCompleted
            End If
            Me.InvokeAsync("TokenGetUserName", New Object() {tokenValue}, Me.TokenGetUserNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnTokenGetUserNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.TokenGetUserNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TokenGetUserNameCompleted(Me, New TokenGetUserNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ClearToken", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ClearToken(ByVal tokenValue As String)
            Me.Invoke("ClearToken", New Object() {tokenValue})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClearTokenAsync(ByVal tokenValue As String)
            Me.ClearTokenAsync(tokenValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClearTokenAsync(ByVal tokenValue As String, ByVal userState As Object)
            If (Me.ClearTokenOperationCompleted Is Nothing) Then
                Me.ClearTokenOperationCompleted = AddressOf Me.OnClearTokenOperationCompleted
            End If
            Me.InvokeAsync("ClearToken", New Object() {tokenValue}, Me.ClearTokenOperationCompleted, userState)
        End Sub
        
        Private Sub OnClearTokenOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClearTokenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClearTokenCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub TokenGetCredenceCompletedEventHandler(ByVal sender As Object, ByVal e As TokenGetCredenceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TokenGetCredenceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub TokenInsertCompletedEventHandler(ByVal sender As Object, ByVal e As TokenInsertCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TokenInsertCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub TokenGetUserNameCompletedEventHandler(ByVal sender As Object, ByVal e As TokenGetUserNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TokenGetUserNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ClearTokenCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
End Namespace
